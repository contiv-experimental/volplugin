---
# This role contains tasks for configuring and starting docker service
#

- name: check docker version
  shell: docker --version
  register: docker_installed_version
  ignore_errors: yes
  tags:
    - prebake-for-dev

- name: install docker (debian)
  shell: curl https://get.docker.com | sed 's/docker-engine/--force-yes docker-engine={{ docker_version }}-0~{{ ansible_distribution_release }}/' | bash
  when: (ansible_os_family == "Debian") and not (docker_installed_version.stdout | match("Docker version {{ docker_version }}, build.*"))
  tags:
    - prebake-for-dev

- name: remove docker (redhat)
  yum: name=docker-engine state=absent
  when: (ansible_os_family == "RedHat") and not (docker_installed_version.stdout | match("Docker version {{ docker_version }}, build.*"))
  tags:
    - prebake-for-dev

- name: install docker (redhat)
  shell: curl https://get.docker.com | sed 's/docker-engine/docker-engine-{{ docker_version }}/' | bash
  when: (ansible_os_family == "RedHat") and not (docker_installed_version.stdout | match("Docker version {{ docker_version }}, build.*"))
  tags:
    - prebake-for-dev

- name: create docker daemon's config directory
  file: path=/etc/systemd/system/docker.service.d state=directory
  tags:
    - prebake-for-dev

- name: setup docker daemon's environment
  template: src=env.conf.j2 dest=/etc/systemd/system/docker.service.d/env.conf
  tags:
    - prebake-for-dev

- name: setup iptables for docker
  shell: >
      ( iptables -L INPUT | grep "{{ docker_rule_comment }} ({{ item }})" ) || \
      iptables -I INPUT 1 -p tcp --dport {{ item }} -j ACCEPT -m comment --comment "{{ docker_rule_comment }} ({{ item }})"
  become: true
  with_items:
    - "{{ docker_api_port }}"

- name: copy systemd units for docker(enable cluster store) (debian)
  template: src=docker-svc.j2 dest=/lib/systemd/system/docker.service
  when: ansible_os_family == "Debian"

- name: copy systemd units for docker(enable cluster store) (redhat)
  template: src=docker-svc.j2 dest=/usr/lib/systemd/system/docker.service
  when: ansible_os_family == "RedHat"

- name: check docker-tcp socket state
  shell: systemctl status docker-tcp.socket | grep 'Active.*active' -o
  ignore_errors: true
  register: docker_tcp_socket_state

- include: create_docker_device.yml
  when: docker_device != ""

- name: copy systemd units for docker tcp socket settings
  template: src=docker-tcp.j2 dest=/etc/systemd/system/docker-tcp.socket
  register: docker_tcp_socket

  # tcp socket service requires docker service to be started after it
- name: reload systemd configuration
  shell: sudo systemctl daemon-reload
  when: "(docker_tcp_socket | changed) or (docker_tcp_socket_state.stdout != 'Active: active')"

- name: stop docker
  service:
    name: docker
    state: stopped
  when: "(docker_tcp_socket | changed) or (docker_tcp_socket_state.stdout != 'Active: active')"

- name: start docker-tcp service
  service:
    name: docker-tcp.socket
    state: started
  when: "(docker_tcp_socket | changed) or (docker_tcp_socket_state.stdout != 'Active: active')"

- name: check docker service state
  shell: sudo systemctl status docker | grep 'Active.*active' -o
  ignore_errors: true
  register: docker_service_state
  tags:
    - prebake-for-dev

- name: remove the docker key file, if any. It shall be regenerated by docker on restart
  file: name=/etc/docker/key.json  state=absent
  when: "(docker_service_state.stderr | match('.*docker.service changed on disk.*')) or (docker_service_state.stdout != 'Active: active')"

# XXX: service module doesn't do daemon-reload yet, so need to use shell module here
# https://github.com/ansible/ansible-modules-core/issues/191
- name: reload docker systemd configuration
  #service: name=docker state=restarted
  shell: sudo systemctl daemon-reload
  when: "(docker_service_state.stderr | match('.*docker.service changed on disk.*')) or (docker_service_state.stdout != 'Active: active')"
  tags:
    - prebake-for-dev

# XXX: this needs to happen twice after setting up the thin provisioner because
#      of some docker bug I've not investigated.
- name: restart docker (first time)
  service:
    name: docker
    state: restarted
  when: thin_provisioned|changed
  ignore_errors: true
  tags:
    - prebake-for-dev

- name: ensure docker is started
  service:
    name: docker
    state: started
  tags:
    - prebake-for-dev

- stat: path=/var/docker_images
  register: docker_images

- name: Import saved docker images
  shell: set -e; cd /var/docker_images; images=$(ls); for i in $images; do docker load -i $i; rm $i; done
  when: docker_images.stat.isdir is defined and docker_images.stat.isdir

- name: check docker-compose version
  shell: docker-compose --version
  register: docker_compose_version
  ignore_errors: yes
  tags:
    - prebake-for-dev

- name: download and install docker-compose
  get_url:
    validate_certs: "{{ validate_certs }}"
    url: https://github.com/docker/compose/releases/download/1.5.2/docker-compose-{{ ansible_system }}-{{ ansible_userspace_architecture }}
    dest: /usr/bin/docker-compose
    mode: u=rwx,g=rx,o=rx
  when: docker_compose_version.stdout != "docker-compose version 1.5.2, build 7240ff3"
  tags:
    - prebake-for-dev

- name: check contiv-compose version
  shell: contiv-compose --version
  register: contiv_compose_version
  ignore_errors: yes
  tags:
    - prebake-for-dev

- name: download contiv-compose
  get_url:
    validate_certs: "{{ validate_certs }}"
    url: https://cisco.box.com/shared/static/24q94bb94nz4wfnl20afwulffh3lcyt2.bz2
    dest: /tmp/contiv-compose.bz2
    force: yes
  when: contiv_compose_version.stdout != "libcompose-cli version 0.0.0-dev (f6f7e5a)"
  tags:
    - prebake-for-dev

- name: install contiv-compose
  shell: tar vxjf /tmp/contiv-compose.bz2
  args:
    chdir: /usr/bin/
  when: contiv_compose_version.stdout != "libcompose-cli version 0.0.0-dev (f6f7e5a)"
  tags:
    - prebake-for-dev
